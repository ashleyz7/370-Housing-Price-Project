# -*- coding: utf-8 -*-
"""
Created on Thu Mar  7 00:43:00 2019

@author: Jonathan
"""
import numpy as np
import pandas as pd
import quandl
quandl.ApiConfig.api_key = "ixxCs-UVrh_LPrFyQMJT"

# =============================================================================
# To use Quandl in spyder run in IPtyhon console:
# !pip install quandl

# Zillow API calls take form of:
# quandl.get("ZILLOW/{AREA_CATEGORY}{AREA_CODE}_{INDICATOR_CODE}", returns="{DATA_TYPE}")

# For us, AREA_CATEGORY = C, but can also be returned by S (State data), CO (County), Z (Zip Code), etc.

# AREA_CODE for Seattle = 15

# INDICATOR_CODE represents the explanatory variable/ data, for example to get price to rent data:
# INDICATOR_CODE = PRR

# All mapping codes are included in 'data'

# Official documentation can be found here: https://www.quandl.com/data/ZILLOW-Zillow-Real-Estate-Research/documentation?anchor=data-organization
# =============================================================================

# For example, to get Median Listing Price - All Homes for Seattle:
seattle_example_data = quandl.get("ZILLOW/C15_MLPAH", returns="pandas")
# where C represents we are aearching for a city, 15 represents the code for Seattle, and MLPAH represents the 
# indicator/metric (MLPAH)


# Not every metric has data available for Seattle, so this filters those null metrics out and creates a .csv 
# with only working indicators
def generate_working_indicators():
    indicators = pd.read_csv('data/indicators.csv',sep='|')
    filtered_indicators = []
    filtered_names = []
    lengths = []
    for code in indicators['CODE']:
        try:
            curr_data = quandl.get('ZILLOW/C15_'+code, returns='pandas')
        except Exception:
            print("Exception encountered")
        else:
            filtered_indicators.append(code)
            filtered_names.append(indicators[indicators['CODE'] == code]['INDICATOR'])
            lengths.append(len(curr_data))
    filtered_df = pd.DataFrame({'INDICATOR':filtered_names, 'CODE':filtered_indicators, 'LENGTH':lengths})
    filtered_df.to_csv('data/filtered_indicators.csv', index=False)
    return filtered_df

# calls the function to generate data and write to .csv
# writes to .csv, so only need to call generate function once after an API update
# filtered_indicators = generate_working_indicators()

# reads in metrics with available data for Seattle (generated by generate_working_indicators())
filtered_indicators = pd.read_csv('data/filtered_indicators.csv')

# Generates data for every available metric for Seattle, and writes it to 'data.csv'
# It looks like Zillow API doesn't update more than once a week, so probably better to not call this too often
# and use the csv instead
def generate_data():
    # Grabs first metric and initializes combined dataframe with data from that metric
    combined_data = quandl.get('ZILLOW/C15_'+filtered_indicators.iloc[0,1], returns='pandas')
    
    # takes the rest of the indicators and calls the API with them, continuously adding to the large df
    for code in filtered_indicators['CODE'][1:]:
        curr_data = quandl.get('ZILLOW/C15_'+code, returns='pandas')
        combined_data = combined_data.merge(curr_data, how='outer', on='Date')
    
    combined_data.columns = filtered_indicators['INDICATOR']
    combined_data.to_csv('data/data.csv')

# if calling function
#data = generate_data()

# if loading from folder
data = pd.read_csv('data/data.csv')
    





